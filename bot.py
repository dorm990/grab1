import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, 
    WebAppInfo, MenuButtonWebApp
)
from aiogram.fsm.storage.memory import MemoryStorage
import aiosqlite
import json
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8302634702:AAELmL4jv_yx9jRcvbrGBGQBKD4rcbET4fI"
WEBAPP_URL = "https://e10d344bb815f3.lhr.life"  # –ù–æ–≤—ã–π URL! # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
ADMIN_IDS = [6827398433]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE = "game.db"

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DATABASE) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS players (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                balance REAL DEFAULT 0,
                stars INTEGER DEFAULT 0,
                ton_balance REAL DEFAULT 0,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_banned INTEGER DEFAULT 0,
                referrer_id INTEGER
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∏–∑–Ω–µ—Å–æ–≤ –∏–≥—Ä–æ–∫–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS player_businesses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                business_id INTEGER,
                level INTEGER DEFAULT 1,
                last_claim TIMESTAMP,
                work_started_at TIMESTAMP,
                is_working INTEGER DEFAULT 0,
                total_earned REAL DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES players(user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS player_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                item_type TEXT,
                item_id INTEGER,
                item_name TEXT,
                purchase_price REAL,
                purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES players(user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS marketplace (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                seller_id INTEGER,
                item_id INTEGER,
                price REAL,
                currency TEXT DEFAULT 'game',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                sold INTEGER DEFAULT 0,
                FOREIGN KEY (seller_id) REFERENCES players(user_id),
                FOREIGN KEY (item_id) REFERENCES player_items(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                currency TEXT,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES players(user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–æ–∫—Å–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS box_openings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                box_type TEXT,
                reward TEXT,
                reward_value REAL,
                opened_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES players(user_id)
            )
        ''')
        
        await db.commit()

async def get_or_create_player(user_id: int, username: str = None, first_name: str = None, referrer_id: int = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞"""
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute('SELECT * FROM players WHERE user_id = ?', (user_id,)) as cursor:
            player = await cursor.fetchone()
        
        if not player:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            await db.execute('''
                INSERT INTO players (user_id, username, first_name, referrer_id) 
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, referrer_id))
            
            # –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
            await db.execute('''
                INSERT INTO player_businesses (user_id, business_id, level) 
                VALUES (?, 1, 1)
            ''', (user_id,))
            
            await db.commit()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–∞–µ–º –±–æ–Ω—É—Å
            if referrer_id:
                await db.execute('''
                    UPDATE players SET balance = balance + 100 
                    WHERE user_id = ?
                ''', (referrer_id,))
                await db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.execute('''
            UPDATE players SET last_active = CURRENT_TIMESTAMP 
            WHERE user_id = ?
        ''', (user_id,))
        await db.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referrer_id = None
    if message.text and len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.startswith('r'):
            try:
                referrer_id = int(ref_code[1:], 16)
            except:
                pass
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
    await get_or_create_player(user_id, username, first_name, referrer_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–∞—Ç—å",
            web_app=WebAppInfo(url=f"{WEBAPP_URL}/game?user_id={user_id}")
        )],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    welcome_text = f"""
ü¶Ü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Duck Business!</b>

–ü—Ä–∏–≤–µ—Ç, {first_name}! 

<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–∏–∑–Ω–µ—Å–∞–º–∏
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–º–∞—à–∏–Ω—ã, –∫–≤–∞—Ä—Ç–∏—Ä—ã)
‚Ä¢ –¢–æ—Ä–≥—É–π—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ–∫—Å—ã

–ù–∞–∂–º–∏—Ç–µ "üéÆ –ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = """
üìñ <b>–ü–æ–º–æ—â—å</b>

<b>–ë–∏–∑–Ω–µ—Å—ã:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –±–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç 4 —á–∞—Å–∞
‚Ä¢ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å
‚Ä¢ –£–ª—É—á—à–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞

<b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –º–∞—à–∏–Ω—ã, –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –¥—Ä—É–≥–æ–µ
‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º

<b>–ë–æ–∫—Å—ã:</b>
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ–∫—Å—ã –∑–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã

<b>–í–∞–ª—é—Ç–∞:</b>
‚Ä¢ –ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤ –∏–≥—Ä–µ
‚Ä¢ TON - –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –∏ –≤—ã–≤–æ–¥–∏—Ç–µ
‚Ä¢ Stars - –ø–æ–∫—É–ø–∞–π—Ç–µ –∑–∞ Telegram Stars
    """
    await callback.message.answer(help_text, parse_mode="HTML")
    await callback.answer()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –±–æ–Ω—É—Å", callback_data="admin_bonus")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban")],
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban")]
    ])
    
    await message.answer("üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    async with aiosqlite.connect(DATABASE) as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        async with db.execute('SELECT COUNT(*) FROM players') as cursor:
            total_players = (await cursor.fetchone())[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        async with db.execute('''
            SELECT COUNT(*) FROM players 
            WHERE date(last_active) = date('now')
        ''') as cursor:
            active_today = (await cursor.fetchone())[0]
        
        # –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
        async with db.execute('SELECT SUM(total_earned) FROM player_businesses') as cursor:
            total_earned = (await cursor.fetchone())[0] or 0
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned:.2f}
    """
    
    await callback.message.answer(stats_text, parse_mode="HTML")
    await callback.answer()

# API –¥–ª—è Web App
async def api_get_player(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞"""
    async with aiosqlite.connect(DATABASE) as db:
        db.row_factory = aiosqlite.Row
        
        async with db.execute('SELECT * FROM players WHERE user_id = ?', (user_id,)) as cursor:
            player = await cursor.fetchone()
        
        if not player:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∏–∑–Ω–µ—Å—ã
        async with db.execute('''
            SELECT * FROM player_businesses WHERE user_id = ?
        ''', (user_id,)) as cursor:
            businesses = await cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        async with db.execute('''
            SELECT * FROM player_items WHERE user_id = ?
        ''', (user_id,)) as cursor:
            items = await cursor.fetchall()
        
        return {
            'player': dict(player),
            'businesses': [dict(b) for b in businesses],
            'items': [dict(i) for i in items]
        }

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
